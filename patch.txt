From a019648bdbded7a51720dbac3f37052942173934 Mon Sep 17 00:00:00 2001
From: Cyph <cyph@savantdegrees.com>
Date: Thu, 12 Jul 2012 15:29:27 +0800
Subject: [PATCH] Update to support r20

---
 .../plugins/android/AndroidSetupFactory.groovy     |    6 +-
 .../gradle/plugins/android/AndroidSetup_r18.groovy |  116 ++++++++++++++++++++
 .../gradle/tasks/android/AaptExecTask_r18.groovy   |   79 +++++++++++++
 .../tasks/android/AndroidSdkToolsFactory.groovy    |    4 +-
 4 files changed, 202 insertions(+), 3 deletions(-)
 create mode 100644 src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetup_r18.groovy
 create mode 100644 src/main/groovy/com/jvoegele/gradle/tasks/android/AaptExecTask_r18.groovy

diff --git a/src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetupFactory.groovy b/src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetupFactory.groovy
index 49a8060..1745e87 100644
--- a/src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetupFactory.groovy
+++ b/src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetupFactory.groovy
@@ -46,8 +46,10 @@ class AndroidSetupFactory {
       return new AndroidSetup_r13(project)
     } else if (this.androidSdkToolsRevision < 17) {
       return new AndroidSetup_r14(project)
-    } else {
+    } else if (this.androidSdkToolsRevision < 18) {
       return new AndroidSetup_r17(project)
+    } else {
+      return new AndroidSetup_r18(project)
     }
   }
-}
\ No newline at end of file
+}
diff --git a/src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetup_r18.groovy b/src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetup_r18.groovy
new file mode 100644
index 0000000..68bc560
--- /dev/null
+++ b/src/main/groovy/com/jvoegele/gradle/plugins/android/AndroidSetup_r18.groovy
@@ -0,0 +1,116 @@
+/*
+ * Copyright 2011 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.jvoegele.gradle.plugins.android
+
+class AndroidSetup_r18 extends AbstractAndroidSetup {
+  AndroidSetup_r18(project) {
+    super(project)
+  }
+
+  void setup() {
+    def ant = project.ant
+    def androidConvention = project.convention.plugins.android
+
+    def sdkDir = ant['sdk.dir']
+    def toolsDir = new File(sdkDir, "tools")
+    def platformToolsDir = new File(sdkDir, "platform-tools")
+
+    println "sdkDir = ${sdkDir}";
+    println "toolsDir = ${toolsDir}";
+    println "platformToolsDir = ${platformToolsDir}";
+
+    ant.condition('property': "exe", value: ".exe", 'else': "") { os(family: "windows") }
+    ant.condition('property': "bat", value: ".bat", 'else': "") { os(family: "windows") }
+
+    if (platformToolsDir.exists()) { // since SDK r8, adb is moved from tools to platform-tools
+      ant.property(name: "adb", location: new File(platformToolsDir, "adb${ant['exe']}"))
+    } else {
+      ant.property(name: "adb", location: new File(toolsDir, "adb${ant['exe']}"))
+    }
+
+    ant.property(name: "zipalign", location: new File(toolsDir, "zipalign${ant['exe']}"))
+    ant.property(name: 'adb.device.arg', value: '')
+
+    def outDir = project.buildDir.absolutePath
+    ant.property(name: "resource.package.file.name", value: "${project.name}.ap_")
+
+    // Required since SDK r17
+    ant.property(name: "out.absolute.dir", value:'.')
+
+    ant.taskdef(resource: 'anttasks.properties', classpathref: 'android.antlibs')
+
+    // The following properties are put in place by the setup task:
+    // android.jar, android.aidl, aapt, aidl, and dx
+    ant.gettype(
+        projectTypeOut: "android.project.type",
+    );
+
+    ant.gettarget(
+      androidJarFileOut: "android.jar",
+      androidAidlFileOut: "android.aidl",
+      bootClassPathOut: "android.target.classpath",
+      targetApiOut: "project.target.apilevel",
+      minSdkVersionOut: "project.minSdkVersion",
+      //renderScriptExeOut: "renderscript",
+      // renderScriptIncludeDirOut: "android.rs",
+      //bootclasspathrefOut: "android.target.classpath",
+      //projectLibrariesRootOut: "project.libraries",
+      //projectLibrariesJarsOut: "project.libraries.jars",
+      //projectLibrariesResOut: "project.libraries.res",
+      //projectLibrariesPackageOut: "project.libraries.package",
+      //projectLibrariesLibsOut: "project.libraries.libs",
+      // targetApiOut: "target.api",
+    );
+
+    ant.dependency(
+      libraryFolderPathOut: "project.library.folder.path",
+      libraryPackagesOut: "project.library.packages",
+      libraryManifestFilePathOut: "project.library.manifest.file.path",
+      libraryResFolderPathOut: "project.library.res.folder.path",
+      libraryBinAidlFolderPathOut: "project.library.bin.aidl.folder.path",
+      libraryNativeFolderPathOut: "project.library.native.folder.path",
+      jarLibraryPathOut: "project.all.jars.path",
+
+      targetApi: ant['project.target.apilevel'],
+      verbose: true
+    );
+
+    ant.property(name: "aapt", location: new File(platformToolsDir, "aapt${ant['exe']}"))
+    ant.property(name: "dx", location: new File(platformToolsDir, "dx${ant['bat']}"))
+    ant.property(name: "renderscript", location: new File(platformToolsDir, "llvm-rs-cc${ant['bat']}"))
+
+    ant.property(name: "android.tools.dir", location:"${ant['sdk.dir']}/tools")
+    ant.property(name: "android.platform.tools.dir", location:"${ant['sdk.dir']}/platform-tools")
+
+    ant.path(id: "android.renderscript.include.path") {
+      pathelement(location:"${ant['android.platform.tools.dir']}/renderscript/include");
+      pathelement(location:"${ant['android.platform.tools.dir']}/renderscript/clang-include");
+	};
+
+    ant.xpath(input: androidConvention.androidManifest, expression: "/manifest/@package", output: "manifest.package")
+    // TODO: there can be several instrumentations defined
+    ant.xpath(input: androidConvention.androidManifest, expression: "/manifest/instrumentation/@android:targetPackage", output: "tested.manifest.package")
+    ant.xpath(input: androidConvention.androidManifest, expression: "/manifest/application/@android:hasCode", output: "manifest.hasCode", 'default': "true")
+
+    ant.xpath(input: androidConvention.androidManifest, expression: "/manifest/instrumentation/@android:name", output: "android.instrumentation")
+
+    if (ant['android.instrumentation']) {
+      androidConvention.instrumentationTestsRunner = ant['android.instrumentation']
+    }
+  }
+}
+
diff --git a/src/main/groovy/com/jvoegele/gradle/tasks/android/AaptExecTask_r18.groovy b/src/main/groovy/com/jvoegele/gradle/tasks/android/AaptExecTask_r18.groovy
new file mode 100644
index 0000000..236f362
--- /dev/null
+++ b/src/main/groovy/com/jvoegele/gradle/tasks/android/AaptExecTask_r18.groovy
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2011 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.jvoegele.gradle.tasks.android
+
+class AaptExecTask_r18 extends AndroidAntTask {
+  AaptExecTask_r18(project) {
+    super(project);
+  }
+
+  /* (non-Javadoc)
+   * @see com.jvoegele.gradle.tasks.android.AndroidAntTask#execute(java.util.Map)
+   */
+  @Override
+  void execute(Map args) {
+	// <aapt executable="${aapt}"
+	//         command="package"
+	//         versioncode="${version.code}"
+	//         versionname="${version.name}"
+	//         debug="${build.is.packaging.debug}"
+	//         manifest="${out.manifest.abs.file}"
+	//         assets="${asset.absolute.dir}"
+	//         androidjar="${project.target.android.jar}"
+	//         apkfolder="${out.absolute.dir}"
+	//         nocrunch="${build.packaging.nocrunch}"
+	//         resourcefilename="${resource.package.file.name}"
+	//         resourcefilter="${aapt.resource.filter}"
+	//         libraryResFolderPathRefid="project.library.res.folder.path"
+	//         libraryPackagesRefid="project.library.packages"
+	//         previousBuildType="${build.last.target}"
+	//         buildType="${build.target}"
+	//         ignoreAssets="${aapt.ignore.assets}">
+	//     <res path="${out.res.absolute.dir}" />
+	//     <res path="${resource.absolute.dir}" />
+	//     <!-- <nocompress /> forces no compression on any files in assets or res/raw -->
+	//     <!-- <nocompress extension="xml" /> forces no compression on specific file extensions in assets and res/raw -->
+	// </aapt>
+
+	println "androidConvention.resDirs = ${androidConvention.resDirs}";
+
+    ant.aapt(
+        executable: ant.aapt,
+        command: args.get('command', 'package'),
+        // versioncode: ant['version.code'],
+        // versionname: ant['version.name'],
+        debug: project.jar.classifier && project.jar.classifier == 'debug',
+        manifest: androidConvention.androidManifest.path,
+        assets: androidConvention.assetsDir,
+        androidjar: ant['android.jar'],
+        apkfolder: project.libsDir,
+        nocrunch: true,
+        resourcefilename: androidConvention.resourceFileName,
+        // resourcefilter="${aapt.resource.filter}"
+        // previousBuildType="${build.last.target}"
+        // buildType="${build.target}"
+        // ignoreAssets="${aapt.ignore.assets}">
+        libraryResFolderPathRefid: "project.library.res.folder.path",
+        libraryPackagesRefid: "project.library.packages",
+        ) {
+      androidConvention.resDirs.each { File file ->
+        res(path: file.path)
+      }
+    }
+  }
+}
+
diff --git a/src/main/groovy/com/jvoegele/gradle/tasks/android/AndroidSdkToolsFactory.groovy b/src/main/groovy/com/jvoegele/gradle/tasks/android/AndroidSdkToolsFactory.groovy
index 341bc31..befc833 100644
--- a/src/main/groovy/com/jvoegele/gradle/tasks/android/AndroidSdkToolsFactory.groovy
+++ b/src/main/groovy/com/jvoegele/gradle/tasks/android/AndroidSdkToolsFactory.groovy
@@ -74,8 +74,10 @@ class AndroidSdkToolsFactory {
       return new AaptExecTask_r7(project)
     } else if (this.androidSdkToolsRevision < 14) {
       return new AaptExecTask_r8(project)
-    } else {
+    } else if (this.androidSdkToolsRevision < 18) {
       return new AaptExecTask_r14(project)
+    } else {
+      return new AaptExecTask_r18(project)
     }
   }
 }
-- 
1.7.10

