apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'signing'

version = '1.1.1-SNAPSHOT'
group = 'org.gradle.api.plugins'

def artifact = 'gradle-android-plugin'
project.artifact = artifact

def isReleaseVersion = !version.endsWith('SNAPSHOT')

configurations {
    sshDeploy

    integrationTestCompile {
        extendsFrom testCompile
    }
    integrationTestRuntime {
        extendsFrom integrationTestCompile, testRuntime
    }
}

repositories {
    mavenCentral()
}

dependencies {
    sshDeploy 'org.apache.maven.wagon:wagon-ssh:1.0-beta-7'
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment ->
                signPom(deployment)
            }

            //configuration = configurations.sshDeploy
            //repository(url: "scp://jvoegele@chilco.textdrive.com/web/public/maven2")
            //repository(url: "file:///tmp/maven2")

            def repositoryUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ''
            def repositoryPassword = project.hasProperty('sonatypePassword') ? sonatypePassword : ''

            if (isReleaseVersion) {
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
            } else {
                repository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
            }

            pom.project(pomConfiguration)
        }
    }
}

dependencies {
    // Add all JAR files in the lib directory of theGradle installation directory
    // to the groovy configuration (is also used by compile configuration)
    groovy fileTree(dir: new File(gradle.gradleHomeDir, 'lib'), includes: ['**/*.jar'])
}

// Make sure all code is compiled, tested and checked before uploadArchives.
uploadArchives.dependsOn ':build'

sourceSets {
    integrationTest {
        groovy.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

task integrationTest(type: Test, dependsOn: jar) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperties['integTest.androidProjects'] = new File(sourceSets.integrationTest.output.resourcesDir, 'androidProjects').absolutePath

    doFirst {
        if (!System.getenv('ANDROID_HOME')) {
            throw new GradleException('ANDROID_HOME environment variable must be defined to run integration tests')
        }
    }
}

task developerBuild {
    dependsOn build, integrationTest
}

idea {
    module {
        downloadSources = true
        downloadJavadocs = true

        testSourceDirs += file('src/integTest/groovy')
        testSourceDirs += file('src/integTest/resources')
    }
    project {
        jdkName = '1.6'
        languageLevel = '1.6'
    }
}

clean << {
    //TODO: will this work on Windows? I intentionally used the file() method so as
    // to be platform independent, but I didn't test this outside MacOS/Linux
    def gradleCacheDir = file("${System.properties['user.home']}/.gradle/cache")
    def pluginCacheDir = file("$gradleCacheDir/$project.group/$project.name")
    logger.warn "Clearing Gradle artifact cache at $pluginCacheDir"
    ant.delete dir: pluginCacheDir
}

jar {
    baseName = artifact
}

task sourcesJar(type: Jar, dependsOn: classes) {
    baseName = artifact
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = artifact
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    if (isReleaseVersion) {
        sign configurations.archives
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-8a'
}

task generatePom << {
    def generatedPomFileName = 'pom.xml'

    pom {
        project(pomConfiguration)
    }.writeTo("$buildDir/$generatedPomFileName")
}

def getPomConfiguration() {
    return {
        groupId project.group
        artifactId project.artifact
        version project.version
        packaging 'jar'
        name 'Gradle Android Plugin'
        description 'Android plugin for the Gradle build system.'
        url 'https://github.com/jvoegele/gradle-android-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        scm {
            url 'https://github.com/jvoegele/gradle-android-plugin'
            connection 'scm:git://github.com/jvoegele/gradle-android-plugin.git'
            developerConnection 'scm:git@github.com:jvoegele/gradle-android-plugin.git'
        }
        developers {
            developer {
                id 'jvoegele'
                name 'Jason Voegele'
                email 'jason.voegele@gmail.com'
            }
            developer {
                id 'kaeppler'
                name 'Matthias KÃ¤ppler'
                email 'm.kaeppler@googlemail.com'
            }
            developer {
                id 'think01'
                name 'Fabio Da Soghe'
                email 'fabiodasoghe@gmail.com'
            }
            developer {
                id 'Ladicek'
                name 'Ladislav Thon'
                email 'ladicek@gmail.com'
            }
            developer {
                id 'ealden'
                name 'Ealden Esto E. Escanan'
                email 'ealden@gmail.com'
            }
            developer {
                id 'erdi'
                name 'Marcin Erdmann'
                email 'erdi84@gmail.com'
            }
        }
    }
}
