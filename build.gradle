apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'signing'

version = '1.2.0-SNAPSHOT'
group = 'org.gradle.api.plugins'

def artifact = 'gradle-android-plugin'
project.ext.set('artifact', artifact)

def isReleaseVersion = !version.endsWith('SNAPSHOT')

configurations {
  integrationTestCompile {
    extendsFrom testCompile
  }

  integrationTestRuntime {
    extendsFrom integrationTestCompile, testRuntime
  }
}

repositories {
  mavenCentral()
}

dependencies {
  // Add all JAR files in the lib directory of theGradle installation directory
  // to the groovy configuration (is also used by compile configuration)
  groovy fileTree(dir: new File(gradle.gradleHomeDir, 'lib'), includes: ['**/*.jar'])
}

// Make sure all code is compiled, tested and checked before uploadArchives.
sourceSets {
  integrationTest {
    groovy.srcDir file('src/integTest/groovy')
    resources.srcDir file('src/integTest/resources')
    compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
    runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
  }
}

task integrationTest(type: Test, dependsOn: jar) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  systemProperties['integTest.androidProjects'] = new File(sourceSets.integrationTest.output.resourcesDir, 'androidProjects').absolutePath

  doFirst {
    if (!System.getenv('ANDROID_HOME')) {
      throw new GradleException('ANDROID_HOME environment variable must be defined to run integration tests')
    }
  }
}

task developerBuild {
  dependsOn build, integrationTest
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true

    testSourceDirs += file('src/integTest/groovy')
    testSourceDirs += file('src/integTest/resources')
  }
  project {
    jdkName = '1.6'
    languageLevel = '1.6'
  }
}

clean << {
  //TODO: will this work on Windows? I intentionally used the file() method so as
  // to be platform independent, but I didn't test this outside MacOS/Linux
  def gradleCacheDir = file("${System.properties['user.home']}/.gradle/cache")
  def pluginCacheDir = file("$gradleCacheDir/$project.group/$project.name")
  logger.warn "Clearing Gradle artifact cache at $pluginCacheDir"
  ant.delete dir: pluginCacheDir
}

jar {
  baseName = artifact
}

task sourcesJar(type: Jar, dependsOn: classes) {
  baseName = artifact
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName = artifact
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

signing {
  if (isReleaseVersion) {
    sign configurations.archives
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.0-rc-3'
}
